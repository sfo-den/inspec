---
title: InSpec - Audit and Test Framework
---

.welcome
  h1 InSpec audit and test automation
  p
    | InSpec is a language and automation for testing your entire infrastructure.
      With InSpec you verify if your servers and applications are configured
      correctly. It is used for continuous testing and compliance auditing.

  p InSpec is an open source project, and weâ€™d love for you to
    a href="/community" get involved.

  a.button
    Try it online

section
  h1 Why InSpec?

  .row
    .columns.medium-4
      p
        b Platform agnostic
      p
        | InSpec supports all major operating systems and many applications out of the box.
          You can easily express
    .columns.medium-4
      p
        b Freedom to run anywhere
      p
        | InSpec provides a local agent as well as full remote testing support.
          It is applied to all systems from legacy servers to modern container automation.
    .colums.medium-4
      p
        b Fully extensible
      p
        | The InSpec language can easily be extended to
          cover new operating systems, devices, or applications.

section
  h1 Working with InSpec

  p InSpec solves your infrastructure testing needs.

  .row
    .columns.medium-6
      p
        b Test the desired state
      p Match your infrastructure to expectations

      p
        b Simple and expressive
      p Reduce friction and overhead. These tests are easy to understand.

      p
        b Test any system anywhere
      p Runs locally and remotely. Supports all major operating systems and configurations.

      p
        b Extensible
      p Easily create custom resources and share them.

    .columns.medium-6
      // Image with this code, code style is ruby:
      //
      // describe file('/etc/myapp.conf') do
      //   it { should exist }
      //   its('mode') { should cmp '0644' }
      // end
      //
      // describe myapp.conf do
      //   its('port') { should cmp 8080 }
      // end
      //
      // describe port(8080) do
      //   it { should be_listening }
      // end

  p Compliance and security requirements as code

  .row
    .columns.medium-6
      p
        b Add context to your tests
      p Supports many fields like descriptions, tags, and impact

      p
        b Focus on critical findings
      p ... instead of minor tests.

      p
        b Codify agreements
      p Combine profiles and customize them with overlays. Pick controls and define exceptions as code.

    .columns.medium-6
      // Image with this code, code style is ruby:
      //
      // control 'sshd-21'
      //   title 'Set SSH Protocol to 2'
      //   desc  'A detailed description about why we wan this ...'
      //   impact 1.0  # this is critical
      //   ref   'Our little compliance guide, section 2.1'
      //
      //   describe sshd_config do
      //     its('Protocol') { should cmp 2 }
      //   end
      // end
